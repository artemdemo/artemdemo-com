{"componentChunkName":"component---src-pages-index-jsx","path":"/blog/3","result":{"data":{"site":{"siteMetadata":{"title":"Artem Demo, indie developer","description":"Blog about web development, indie GameDev"}},"allMarkdownRemark":{"totalCount":39,"edges":[{"node":{"excerpt":"Ok, first of all I’m assuming you know what Redux is and already used it in one of your projects. Now, after we established that, let’s move on. I always prefer to be clear in my assumptions and intentions. It makes life much easier :)","fields":{"slug":"/20191105-you-shouldnt-always-use-redux/"},"frontmatter":{"date":"05 November, 2019","title":"You shouldn't always use redux life-cycle in your app","featuredImage":null}}},{"node":{"excerpt":"Yeah, I know, another library. But that’s okay, we’ll go through all of them and we’ll find the best one for each project. Or at least this is something that we should do as responsible developers.","fields":{"slug":"/20191101-why-use-svelte/"},"frontmatter":{"date":"01 November, 2019","title":"Why use Svelte","featuredImage":null}}},{"node":{"excerpt":"I’m using a lot of git features via CLI. Mainly it’s rebasing, committing and pushing new changes to the repository. I know that most editors have UI solutions for these commands, but I never liked it and honestly don’t see any reason to change my habits. Stubborn you say? Probably. Don’t know.","fields":{"slug":"/20191021-my-cli-shortcuts-for-git/"},"frontmatter":{"date":"21 October, 2019","title":"My CLI shortcuts for git","featuredImage":null}}},{"node":{"excerpt":"The whole logic of styled-components can be described in one “feature request”: “Let’s manage CSS in js alongside with component core code”. The logic behind it is sort of obvious - it will give us the dynamic of js inside of CSS and we’ll be able to treat styling as part of component code and not store it in a separate file. The idea is promising, now let’s see what are some of the edge cases. And why is that? Because nothing is ideal in the world.","fields":{"slug":"/20191014-styled-components-the-interesting-parts/"},"frontmatter":{"date":"14 October, 2019","title":"Styled-components - the interesting parts","featuredImage":null}}},{"node":{"excerpt":"“Let’s play a game” I will give you a link to a form that is designed against all UI and UX norms and you’ll need to fill it as fast as possible. You can’t imagine how hard it could be when the designer deliberately is going against all codes that the industry agrees upon.","fields":{"slug":"/20191012-deliberately-painful-ui/"},"frontmatter":{"date":"12 October, 2019","title":"Deliberately painful UI","featuredImage":null}}},{"node":{"excerpt":"“Rewriting almost always feels a lot more appealing then gradual refactoring, but remember, that you’re comparing reality to a fictitious concept.” Always rewrite EVERYTHING! Sometimes I have a feeling that there is a tradition, in the developers’ community, that whenever you arrive at a new workplace, one of the first things you’ll do is to say that all this old code should be rewritten. This is rarely the case, but traditional ways are hard to stop or be replaced by something else, right?","fields":{"slug":"/20190525-rewrite-or-not-your-app/"},"frontmatter":{"date":"25 May, 2019","title":"Rewrite or not your app","featuredImage":null}}},{"node":{"excerpt":"I have already written a post about mocking moment.js for tests. Today let’s talk about how to use mocks in a specific tests framework - Jest. Jest was developed by Facebook and was based on another tests library called Jasmine. It meant that Jest used widely popular test syntax and could be adapted very easily.","fields":{"slug":"/20190503-mock-wiht-jest/"},"frontmatter":{"date":"03 May, 2019","title":"How to mock components with jest","featuredImage":null}}},{"node":{"excerpt":"It would be a long journey. Really, there were 17 sections, each one included from 3 to 26 videos. Each video was from 3, up to 16 minutes. This all added up to a very long course. On the other hand, what did you expect? To learn the profession in one sitting? Sadly it’s not the case. Of course, even after that course, you wouldn’t, by any means, be a good product manager. What you would lack would be real-world experience, but at least you would have a good start if you were dedicated and…","fields":{"slug":"/20190316-udemy-become-a-product-manager/"},"frontmatter":{"date":"16 March, 2019","title":"Become a Product Manager [udemy]","featuredImage":null}}},{"node":{"excerpt":"Breadcrumbs can be displayed in different ways. Usually, this is solved in a naive way - if a user enters the page where a certain product is displayed, then he will see breadcrumbs from categories that are hierarchically dependent on each other. This is reasonably easy to implement because it is static information. The more complex requirement is to display a history of the changes, where we’ll see not only the previous pages but also the filters that have been applied to them.","fields":{"slug":"/20190314-state-specific-breadcrumbs/"},"frontmatter":{"date":"14 March, 2019","title":"State-specific breadcrumbs","featuredImage":null}}},{"node":{"excerpt":"Errors will occur no matter what, but I hope that’s not stopping you from writing code because it doesn’t matter if you stop - someone else will continue the tradition instead :) So the only proper solution is to be prepared and to handle errors in the right way.","fields":{"slug":"/20190308-catch-and-log-errors-in-NodeJS-app/"},"frontmatter":{"date":"08 March, 2019","title":"Catch and log errors in NodeJS app","featuredImage":null}}}]}},"pageContext":{"skip":20,"limit":10}},"staticQueryHashes":[]}