{"version":3,"sources":["webpack:///./src/pages/md/404.md","webpack:///./src/services/testEnv.js","webpack:///./src/pages/404.jsx"],"names":["isTestEnv","process","e","NotFoundPage","BasePage","constructor","props","super","this","contentMd","require","default"],"mappings":"6FAAA,OAAe,oF,kCCAf,kCAIO,MAAMA,EAAY,MACvB,IACE,OAAOC,EACP,MAAOC,GACP,OAAO,IAJc,I,kCCJzB,6CAKA,MAAMC,UAAqBC,UACvBC,YAAYC,GACRC,MAAMD,GAONE,KAAKC,UAAYT,IAAY,KAAOU,EAAQ,QAA0BC,SAI/DR","file":"component---src-pages-404-jsx-93a927e2339f30e33082.js","sourcesContent":["export default \"# NOT FOUND\\n\\nYou just hit a route that doesn't exist... the sadness.\";","// While running test there will be access to env variables.\n// If there is such access, then we can check whether it's test\n// and make some adjustments.\n//\nexport const isTestEnv = (() => {\n  try {\n    return process.env.NODE_ENV === 'test';\n  } catch (e) {\n    return false;\n  }\n})();\n","import React from 'react'\nimport { graphql } from 'gatsby';\nimport BasePage from './BasePage/BasePage';\nimport { isTestEnv } from '../services/testEnv';\n\nclass NotFoundPage extends BasePage {\n    constructor(props) {\n        super(props);\n\n        // Here I'm using inline loader for webpack.\n        // Since I don't have access to original webpack configuration,\n        // it's the only way to use specific loader\n        // @docs https://webpack.js.org/concepts/loaders/#inline\n        //\n        this.contentMd = isTestEnv ? null : require('raw-loader!./md/404.md').default;\n    }\n}\n\nexport default NotFoundPage;\n\nexport const pageQuery = graphql`\n  query {\n    site {\n      siteMetadata {\n        title\n        description\n      }\n    }\n  }\n`;\n"],"sourceRoot":""}