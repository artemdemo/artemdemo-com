{"componentChunkName":"component---src-templates-blog-post-jsx","path":"/blog/20181105-test-code-with-momentjs/","webpackCompilationHash":"303d17b755e584b7f35f","result":{"data":{"site":{"siteMetadata":{"title":"Artem Demo, web dev","author":"Artem Demo"}},"markdownRemark":{"id":"091c1f0e-ae06-5ccf-8504-0b30755c5773","excerpt":"I’m going to talk about unit tests here, not any other kind of tests.\nAnd unit tests have, in my opinion, the following list of criteria…","html":"<p>I’m going to talk about unit tests here, not any other kind of tests.\nAnd unit tests have, in my opinion, the following list of criteria that they have to meet.\nThis list makes it hard to write tests for code that use external libraries, especially ones that manipulate time:</p>\n<ul>\n<li>Unit tests should be able to run on the developer’s machine as well as on the remote server</li>\n<li>Unit tests shouldn’t relate to timezone</li>\n<li>Each tested class (or component) should be tested independently from external libraries</li>\n<li>Clarification: All external dependencies should be mocked-up</li>\n</ul>\n<p>With this in mind, let’s see what we can do.</p>\n<p>First of all, regardless of what your code is -\nyou don’t want to test 3rd party libraries as well as other components outside of the current unit.\nThis means that we don’t want to test, for example, how <code class=\"language-text\">format()</code> or <code class=\"language-text\">duration()</code> methods work.\nWe should assume that moment is a well tested library and go with it.\n(In case we aren’t sure, we can create separate test files, that will check moment.js only)</p>\n<p>What does it tell us?\nWell first of all it defines our approach - we need to mock-up the 3rd party library,\ninstead of using original code.</p>\n<p>Should our code reproduce exact functionality?\nAbsolutely not, we only need to be sure that the methods receive properties that it should receive and that’s all.\nBut in the case of moment we’ll need to create some wrapper, that will act like an authentic library.\nLet’s see an example of how we use the <code class=\"language-text\">format()</code> method:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> moment <span class=\"token keyword\">from</span> <span class=\"token string\">'moment'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> timeMoment <span class=\"token operator\">=</span> <span class=\"token function\">moment</span><span class=\"token punctuation\">(</span><span class=\"token number\">1540500979000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ntimeMoment<span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token string\">'HH:mm:ss, YYYY-MM-DD'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Another example will be usage of the <code class=\"language-text\">duration()</code> method:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> moment <span class=\"token keyword\">from</span> <span class=\"token string\">'moment'</span><span class=\"token punctuation\">;</span>\nmoment<span class=\"token punctuation\">.</span><span class=\"token function\">duration</span><span class=\"token punctuation\">(</span>diffTimestamp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">asDays</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>So now we need a file that will reproduce this API, but return only parameters.\nThe solution could be the following code:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">MomentMock</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">time</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span> <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">MomentMock</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_time <span class=\"token operator\">=</span> time<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MomentMock</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_time <span class=\"token operator\">=</span> time<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function-variable function\">format</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">format</span> <span class=\"token operator\">=></span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_time<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> [</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>format<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">]</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>utc <span class=\"token operator\">=</span> MomentMock<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nMomentMock<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">duration</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">time</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    <span class=\"token function-variable function\">asDays</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>time<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> asDays</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> MomentMock<span class=\"token punctuation\">;</span></code></pre></div>\n<p>It’s especially helpful if the time parameter is primitive that represents time, like a timestamp.\nThis way we’re testing only that we used the right timestamp and format string.\nAlso, we don’t need to care about the timezone of the machine where we run tests,\nsince we’re not dealing with <code class=\"language-text\">Date()</code> objects.</p>","frontmatter":{"title":"How to test code that uses moment.js","date":"November 05, 2018","tags":["moment.js","test","mocks"]}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/20181105-test-code-with-momentjs/","previous":{"fields":{"slug":"/20181104-replacing-momentjs/"},"frontmatter":{"title":"Replacing moment.js with date-fns","tags":["moment.js","date-fns"]}},"next":{"fields":{"slug":"/20181121-what-is-rest/"},"frontmatter":{"title":"What is REST?","tags":["rest"]}}}}}