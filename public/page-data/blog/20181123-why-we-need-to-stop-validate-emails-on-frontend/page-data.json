{"componentChunkName":"component---src-templates-blog-post-jsx","path":"/blog/20181123-why-we-need-to-stop-validate-emails-on-frontend/","webpackCompilationHash":"7f3158477db4b45da1f4","result":{"data":{"site":{"siteMetadata":{"title":"Artem Demo, frontend dev.","author":"Artem Demo"}},"markdownRemark":{"id":"d16f5fc6-1664-5ba4-9aa1-dd299e7f356f","excerpt":"Let’s talk about one of the most well-known features of the web - registration.\nNot particularly the whole process, but in particular one…","html":"<p>Let’s talk about one of the most well-known features of the web - registration.\nNot particularly the whole process, but in particular one aspect, email.\nFor almost anything on the web, we need an email: ordering goods, registering for a service,\nreceiving notifications, etc. It’s logical that if we need emails so much,\nthen we’ll need to somehow be sure that the user has provided a correct one.</p>\n<p>Ok, let’s do a quick search on the Internet and see what are the front-end solutions for email validation.\nWe’ll quickly find the most popular <a href=\"https://stackoverflow.com/a/46181\">stackoverflow answer</a> for this problem.\nIt uses some complex regular expressions for this task and even takes into account Unicode,\nhence email nowadays can be written in any language as well as English.\nThis is a good start, but it doesn’t take into account all cases of email specification.</p>\n<p>Have you actually tried to read a complete definition of what an email can be?\nTrust me, there are some surprises :) Let’s see some examples.\nHere is a list of different email addresses, which one is valid?</p>\n<ul>\n<li>mail”hello@there”@mail.com</li>\n<li>user+mailbox/department=shipping@example.com</li>\n<li>mail”(hi)“@mail.com</li>\n<li>用户@例子.广告</li>\n<li>mail@dimainname</li>\n<li>mail@somedomain.com</li>\n</ul>\n<p>Well, most people will say that only the last one is valid.\nBut in fact, that’s not true. Every email in the list is valid according to the definition.\nObviously, someone with email mail@dimainname will have a hard time trying to register to any service,\nbut it doesn’t mean that his email isn’t valid. By the way, Chrome, and other browsers will validate exactly that,\nwhen you use the built-in validation for email. You can test it in <a href=\"https://jsbin.com/varilim/edit?js,output\">this example</a>.</p>\n<p>The next logical question is: could we use the full validation for email?\nActually, we could, you can find it easily <a href=\"https://www.regular-expressions.info/email.html\">here</a> or\n<a href=\"https://emailregex.com/\">here</a>.\nThe problem is that it’s actually useless.</p>\n<p>Let’s face it - usually, the problem lies not in hardcore emails, like, mail”hello@there”@mail.com,\nas obviously, no-one uses it. So let’s take a step back and try to redefine the problem.\nWhy do we actually need an email validation? What are we trying to solve?</p>\n<p>Can we prevent users from entering a false email? No, we can’t, if the user wants to,\nhe could just enter something like noname@wtf.com and it will pass any regex validation.\nActually, if we want to check whether an address is 100% valid,\nthen we need to send an email to the given address and then we’ll see.\nThis is the only way, and obviously, we can’t do this kind of validation in the browser.</p>\n<p>So instead of trying to find out whether a user is trying to use an incorrect email,\nwe’ll try to help him to write his email.\nUsually, users just misspell their own email and we can just test for common mistakes and that’s it.\nSo what are the mistakes:</p>\n<ul>\n<li>Adding a character after a dot, by typing on one of the buttons nearby.</li>\n<li>Check that the user used @ in the email</li>\n<li>No white spaces</li>\n<li>Take into account the option that the email could have Unicode symbols</li>\n</ul>\n<p>This is it, the rest is the server’s problem and even the server will only need to send an email to the given address\nand then check whether it returns an error. This is the only validation.</p>\n<p>So what could be the regex validation at the frontend, given the list of constraints I mentioned before?\nThis is an example of such a regex:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token operator\">^</span>\\<span class=\"token constant\">S</span><span class=\"token punctuation\">.</span><span class=\"token operator\">+</span>@<span class=\"token punctuation\">[</span><span class=\"token operator\">^</span>@\\s\\<span class=\"token operator\">/</span>\\\\<span class=\"token punctuation\">,</span><span class=\"token punctuation\">;</span><span class=\"token string\">\":'|&lt;>]+[^.]\\.[^@\\s\\/\\\\,.;\"</span><span class=\"token punctuation\">:</span>'<span class=\"token operator\">|</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">></span><span class=\"token punctuation\">]</span><span class=\"token operator\">+</span>$</code></pre></div>\n<p>I’m not saying that it’s perfect, but I think it could be a step in the right direction.\nBy the way, if you find a way to improve it, then <a href=\"https://artemdemo.com/contact\">write to me about it</a>,\nI want to discuss this.</p>","frontmatter":{"title":"Why we need to stop validating emails at the frontend","date":"November 23, 2018","tags":["email","validation","regex"]}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/20181123-why-we-need-to-stop-validate-emails-on-frontend/","previous":{"fields":{"slug":"/20181122-reducing-boilerplate-in-react-redux-app/"},"frontmatter":{"title":"Reducing boilerplate in React + Redux app","tags":["react","redux","boilerplate","constants"]}},"next":{"fields":{"slug":"/20181125-lazy-load-components-in-react/"},"frontmatter":{"title":"Lazy load components in React","tags":["react","lazy load","React.lazy","React.Suspense"]}}}}}