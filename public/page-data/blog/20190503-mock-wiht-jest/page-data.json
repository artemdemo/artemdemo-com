{"componentChunkName":"component---src-templates-blog-post-jsx","path":"/blog/20190503-mock-wiht-jest/","webpackCompilationHash":"3e459e0cf5a4f54af2a0","result":{"data":{"site":{"siteMetadata":{"title":"Artem Demo, frontend dev.","author":"Artem Demo"}},"markdownRemark":{"id":"268f6c53-8b42-5c20-afb7-5dd22c181187","excerpt":"I have already written a post about mocking moment.js for tests. Today let’s talk about how to use mocks in a specific tests framework - Jest. Jest was developed by Facebook and was based on another tests library called Jasmine. It meant that Jest used widely popular test syntax and could be adapted very easily.","html":"<p>I have already written a post about <a href=\"https://artemdemo.com/blog/20181105-test-code-with-momentjs/\">mocking moment.js for tests</a>. Today let’s talk about how to use mocks in a specific tests framework - <a href=\"https://jestjs.io/\">Jest</a>. Jest was developed by Facebook and was based on another tests library called Jasmine. It meant that Jest used widely popular test syntax and could be adapted very easily.</p>\n<!-- end -->\n<p>The main reason why Facebook decided to write its own tests framework was to create a good tool that would serve it’s main UI framework - React. Therefore Jest had specific methods that were suited to testing React components. I won’t talk about it in this post since Jest is well suited for testing any javascript code.</p>\n<p>First, we need to define the problem that we’re facing. Let’s say we have some class that we need to test (this is the whole goal of this post, right?):</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> format <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'date-fns'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> PropTypes <span class=\"token keyword\">from</span> <span class=\"token string\">'prop-types'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">DateComponent</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>PureComponent</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> timeStamp<span class=\"token punctuation\">,</span> formatStr <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n        <span class=\"token punctuation\">{</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span>timeStamp<span class=\"token punctuation\">,</span> formatStr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n    <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\nSomeClass<span class=\"token punctuation\">.</span>propTypes <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  timeStamp<span class=\"token punctuation\">:</span> PropTypes<span class=\"token punctuation\">.</span>number<span class=\"token punctuation\">.</span>isRequired<span class=\"token punctuation\">,</span>\n  formatStr<span class=\"token punctuation\">:</span> PropTypes<span class=\"token punctuation\">.</span>string<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\nSomeClass<span class=\"token punctuation\">.</span>defaultProps <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  formatStr<span class=\"token punctuation\">:</span> <span class=\"token string\">'HH:mm:ss, YYYY-MM-DD'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>First of all, if you say, that this call can be a function, you’ll be right. I just want to define it as a class for now. But good catch, I already like you!</p>\n<p>So, what do we have here? DateComponent is a very simple component that takes 2 properties: timeStamp and formatStr. When the first one is required and the second is optional, that means it has a default value. This is obvious enough, so let’s continue. In the render method, we’re displaying timeStamp in the defined format. Nothing fancy, pretty basic stuff.</p>\n<p>In the previous post, we already talked about <a href=\"https://artemdemo.com/blog/20181105-test-code-with-momentjs/\">how to test code that uses moment.js</a> - this one is very similar, we just need to mock date-fns, so let’s write the solution right away:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// __mocks__/date-fns.js</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">format</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">date<span class=\"token punctuation\">,</span> formatStr</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token operator\">+</span>date<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> [</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>formatStr<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">]</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// __tests__/DateComponent.test.jsx</span>\n<span class=\"token keyword\">import</span> renderer <span class=\"token keyword\">from</span> <span class=\"token string\">'react-test-renderer'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> DateComponent <span class=\"token keyword\">from</span> <span class=\"token string\">'../DateComponent'</span><span class=\"token punctuation\">;</span>\n\njest<span class=\"token punctuation\">.</span><span class=\"token function\">mock</span><span class=\"token punctuation\">(</span><span class=\"token string\">'date-fns'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> timeStamp <span class=\"token operator\">=</span> <span class=\"token number\">1540035262000</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">describe</span><span class=\"token punctuation\">(</span><span class=\"token string\">'DateComponent'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">'should render with default format'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> tree <span class=\"token operator\">=</span> renderer<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span>\n      <span class=\"token operator\">&lt;</span>DateComponent timeStamp<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>timeStamp<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toJSON</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>tree<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toMatchSnapshot</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">'should render with custom format'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> tree <span class=\"token operator\">=</span> renderer<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span>\n      <span class=\"token operator\">&lt;</span>DateComponent timeStamp<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>timeStamp<span class=\"token punctuation\">}</span> formatStr<span class=\"token operator\">=</span><span class=\"token string\">'YYYY/MM/DD'</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toJSON</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>tree<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toMatchSnapshot</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Ok, that’s was easy. Now, let’s start using <code class=\"language-text\">DateComponent</code> somewhere. In this case, we’ll need to mock it too. The reason is simple - each unit test should test only one component, not all of them, including all dependencies, but only one specific component.</p>\n<p>Let’s say we have <code class=\"language-text\">ViewComponent</code> component that is using <code class=\"language-text\">DateComponent</code> in some places. If I will write a test for <code class=\"language-text\">ViewComponent</code> in a straight forward way, without mocking <code class=\"language-text\">DateComponent</code>, I will be testing not only <code class=\"language-text\">ViewComponent</code>, but also all his children, which is undesirable.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// ViewComponent.jsx</span>\n<span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> DateComponent <span class=\"token keyword\">from</span> <span class=\"token string\">'../DateComponent'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">ViewComponent</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> startTimestamp <span class=\"token operator\">=</span> <span class=\"token number\">1540035262000</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> endTimestamp <span class=\"token operator\">=</span> <span class=\"token number\">1540036000000</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>React<span class=\"token punctuation\">.</span>Fragment<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>p<span class=\"token operator\">></span>\n        Start date<span class=\"token punctuation\">:</span> <span class=\"token operator\">&lt;</span>DateComponent timeStamp<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>startTimestamp<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>p<span class=\"token operator\">></span>\n        End date<span class=\"token punctuation\">:</span> <span class=\"token operator\">&lt;</span>DateComponent timeStamp<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>endTimestamp<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>React<span class=\"token punctuation\">.</span>Fragment<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Therefore we’ll need to add mocks for <code class=\"language-text\">DateComponent</code>, so we can test <code class=\"language-text\">ViewComponent</code> disconnected from its child components. This mock file will need to be added in the same directory where <code class=\"language-text\">DateComponent</code> is stored and should be placed in <code class=\"language-text\">__mocks__</code> directory:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// __mocks__/DateComponent.test.jsx</span>\n\n<span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">DateComponent</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">props</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div data<span class=\"token operator\">-</span>mock<span class=\"token operator\">=</span><span class=\"token string\">'DateComponent'</span><span class=\"token operator\">></span>\n        timeStamp<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>timeStamp<span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> DateComponent<span class=\"token punctuation\">;</span></code></pre></div>\n<p>As you can see above - there is no logic in the mocked component. The whole point is to display the incoming data and we need it only to test how the parent component is using the public API of the DateComponent.</p>\n<p>The final step will be to create a test for <code class=\"language-text\">ViewComponent</code> itself:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// __tests__/ViewComponent.test.jsx</span>\n<span class=\"token keyword\">import</span> renderer <span class=\"token keyword\">from</span> <span class=\"token string\">'react-test-renderer'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> ViewComponent <span class=\"token keyword\">from</span> '<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token operator\">/</span>ViewComponent<span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">describe</span><span class=\"token punctuation\">(</span>ViewComponent<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">'should render without data'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> tree <span class=\"token operator\">=</span> renderer<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span>\n      <span class=\"token operator\">&lt;</span>ViewComponent <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toJSON</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>tree<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toMatchSnapshot</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>","frontmatter":{"title":"How to mock components with jest","date":"May 03, 2019","tags":["jest","test","mocks"]}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/20190503-mock-wiht-jest/","previous":{"fields":{"slug":"/20190316-udemy-become-a-product-manager/"},"frontmatter":{"title":"Become a Product Manager [udemy]","tags":["udemy","product management","studying"]}},"next":{"fields":{"slug":"/20190525-rewrite-or-not-your-app/"},"frontmatter":{"title":"Rewrite or not your app","tags":["refactoring","rewrite","product management"]}}}}}