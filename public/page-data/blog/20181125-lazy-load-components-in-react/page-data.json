{"componentChunkName":"component---src-templates-blog-post-jsx","path":"/blog/20181125-lazy-load-components-in-react/","webpackCompilationHash":"3e459e0cf5a4f54af2a0","result":{"data":{"site":{"siteMetadata":{"title":"Artem Demo, frontend dev.","author":"Artem Demo"}},"markdownRemark":{"id":"121ea097-bef5-573f-aeba-b806d1d874e1","excerpt":"Lazy loading in React was always possible.\nIt wasn’t so clear how to do it properly and how to handle all edge cases, as well as how to find…","html":"<p>Lazy loading in React was always possible.\nIt wasn’t so clear how to do it properly and how to handle all edge cases, as well as how to find all of them,\nbecause, like many things in life, we need first to encounter the problems,\nand only then can we be ready to handle them properly.</p>\n<p>Since React version 16.6 we have had <code class=\"language-text\">React.lazy</code> and <code class=\"language-text\">React.Suspense</code> -\nhelper function and helper component that have come to the rescue,\nand which promise to make it easier to deal with the lazy load.\nBut first, let’s see what is the problem with asynchronous load and how it was handled “the old way”.\nIt will help us better understand what new features React are bringing to the table.</p>\n<p>In general asynchronous loading of a script is handled not by React (or any other library),\nbut by webpack (I’m assuming we are using it, as our main task manager).\nIn order to load some code we need to use dynamic <code class=\"language-text\">import()</code>\nwhich will return a promise and as soon as the code is loaded, it will be resolved. Something like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span><span class=\"token punctuation\">(</span>'<span class=\"token punctuation\">.</span><span class=\"token operator\">/</span>examples<span class=\"token operator\">/</span>some<span class=\"token operator\">-</span>script<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    e<span class=\"token punctuation\">.</span><span class=\"token function\">someFunction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Webpack will handle all the loading process, we don’t need to worry about it.\nWe only need to write the code. There is no difference in the case of React,\nwe still will need to use <code class=\"language-text\">import()</code>, but this time we’ll wrap it in the component.</p>\n<p>The main catch in this process is where to place <code class=\"language-text\">import()</code>.\nThis method can’t be generalized and encapsulated inside some component, like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">LazyLoader</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Components</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">componentDidMount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> pathToScropt <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> props<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">import</span><span class=\"token punctuation\">(</span>pathToScropt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">component</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// what to do with loaded component</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token comment\">// ...code</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">import()</code> should be written with the exact path to the component (or, at least to the directory) otherwise,\nit won’t work. This is exactly the case with the new features as well.</p>\n<p>However, we still want to write a wrapper,\nbecause there are additional general issues with asynchronous components that I want to solve in one place.\nSuch as, what should be rendered in place of a component that has been loaded.\nI want to use some general loader in most cases and have the option to change it sometimes.\nFor this reason, by the way, we have <code class=\"language-text\">React.Suspense</code> component.</p>\n<p>Therefore the solution could be something like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">lazify</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">loader</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> Component <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">lazy</span><span class=\"token punctuation\">(</span>loader<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">const</span> loadingFallback <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>React<span class=\"token punctuation\">.</span>Children<span class=\"token punctuation\">.</span><span class=\"token function\">count</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> props<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n            <span class=\"token operator\">&lt;</span>span<span class=\"token operator\">></span>Loading<span class=\"token operator\">...</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>span<span class=\"token operator\">></span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n        <span class=\"token operator\">&lt;</span>React<span class=\"token punctuation\">.</span>Suspense fallback<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>loadingFallback<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n            <span class=\"token operator\">&lt;</span>Component <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span>props<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>React<span class=\"token punctuation\">.</span>Suspense<span class=\"token operator\">></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> lazify<span class=\"token punctuation\">;</span></code></pre></div>\n<p>And the usage:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// SomeComponent.async.jsx</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token function\">lazify</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n  <span class=\"token keyword\">import</span><span class=\"token punctuation\">(</span><span class=\"token comment\">/* webpackChunkName: \"SomeComponent\" */</span> '<span class=\"token punctuation\">.</span><span class=\"token operator\">/</span>SomeComponent<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>I’m using magic comment <code class=\"language-text\">/* webpackChunkName: &quot;SomeComponent&quot; */</code>\nin order to hint to the webpack what name to use for the chunk it will create.\nThis name will be used in development only and it will make it\nmuch easier to keep track of the files that will be created.</p>\n<p>In my implementation, I also use a general loading message as well as give the option to override it.\nIf the user uses the component “as is”, then it will be rendered “Loading…” until the component is ready.\nIf you want to render something else, you should provide children to the component and they will be rendered\nuntil the component is ready:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> SomeComponent <span class=\"token keyword\">from</span> <span class=\"token string\">\"./SomeComponent.async\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">RootComponent</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token operator\">&lt;</span>SomeComponent<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>span<span class=\"token operator\">></span>Another loading…<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>span<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>SomeComponent<span class=\"token operator\">></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>And this is it. You can now write and use lazy components.</p>","frontmatter":{"title":"Lazy load components in React","date":"November 25, 2018","tags":["react","lazy load","React.lazy","React.Suspense"]}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/20181125-lazy-load-components-in-react/","previous":{"fields":{"slug":"/20181123-why-we-need-to-stop-validate-emails-on-frontend/"},"frontmatter":{"title":"Why we need to stop validating emails at the frontend","tags":["email","validation","regex"]}},"next":{"fields":{"slug":"/20190228-coursera-digital-product-management/"},"frontmatter":{"title":"Digital Product Management - Modern Fundamentals [coursera]","tags":["coursera","product management","studying"]}}}}}