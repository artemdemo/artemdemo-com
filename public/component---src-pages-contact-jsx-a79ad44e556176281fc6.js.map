{"version":3,"sources":["webpack:///./src/components/Icon/Icon.jsx","webpack:///./src/components/ContactForm/ContactForm.jsx","webpack:///./src/pages/contact.jsx","webpack:///./node_modules/classnames/index.js","webpack:///./src/services/testEnv.js","webpack:///./src/pages/md/contact.md"],"names":["SpanSty","styled","span","props","inText","Icon","React","PureComponent","renderIcon","name","title","className","this","iconClass","classnames","render","Error","propTypes","PropTypes","string","isRequired","bool","defaultProps","FORM_URL","ContactFormLoading","div","loaded","ContactFormIframe","iframe","IconWrap","ContactForm","constructor","super","state","formLoaded","iframeLoaded","setState","Fragment","src","onLoad","bind","frameBorder","marginHeight","marginWidth","Contact","BasePage","contentMd","isTestEnv","require","renderAfterContent","pageQuery","hasOwn","hasOwnProperty","classNames","classes","i","arguments","length","arg","argType","push","Array","isArray","inner","apply","key","call","join","module","exports","process","e"],"mappings":"sKAOA,MAAMA,EAAUC,IAAOC,KAAV,gEAAGD,CAAH,QACPE,GAASA,EAAMC,OAAS,sBAAwB,IAQtD,MAAMC,UAAaC,IAAMC,cACrBC,aACI,MAAM,KAAEC,EAAF,MAAQC,EAAR,UAAeC,GAAcC,KAAKT,MAElCU,EAAYC,IAAW,KAAM,CAC/B,CAAE,MAAKL,MAAS,GACjBE,GAEH,OACI,0BACIA,UAAWE,EACXH,MAAOA,IAKnBK,SACI,MAAM,KAAEN,EAAF,OAAQL,GAAWQ,KAAKT,MAE9B,GAAa,KAATM,GAAuB,MAARA,EACf,MAAM,IAAIO,MAAM,sCAGpB,OAAIZ,EAKA,kBAACJ,EAAD,CAASI,OAAQA,GACZQ,KAAKJ,cALHI,KAAKJ,cAWxBH,EAAKY,UAAY,CACbR,KAAMS,IAAUC,OAAOC,WACvBV,MAAOQ,IAAUC,OACjBR,UAAWO,IAAUC,OACrBf,OAAQc,IAAUG,MAGtBhB,EAAKiB,aAAe,CAChBZ,MAAO,KACPC,UAAW,KACXP,QAAQ,GAGGC,QC5Df,MAAMkB,EAAW,oHAEXC,EAAqBvB,IAAOwB,IAAV,kFAAGxB,CAAH,0BAElBE,GAASA,EAAMuB,OAAS,iBAAmB,IAG3CC,EAAoB1B,IAAO2B,OAAV,iFAAG3B,CAAH,mDAIjBE,GAASA,EAAMuB,OAAS,uBAAyB,IAGjDG,EAAW5B,IAAOC,KAAV,wEAAGD,CAAH,iCAKd,MAAM6B,UAAoBxB,IAAMC,cAC5BwB,YAAY5B,GACR6B,MAAM7B,GAENS,KAAKqB,MAAQ,CACTC,YAAY,GAIpBC,eACIvB,KAAKwB,SAAS,CACVF,YAAY,IAIpBnB,SACI,OACI,kBAAC,IAAMsB,SAAP,KACI,kBAACb,EAAD,CACIE,OAAQd,KAAKqB,MAAMC,YADvB,qBAII,kBAACL,EAAD,KACI,kBAAC,EAAD,CAAMpB,KAAK,wBAGnB,kBAACkB,EAAD,CACIW,IAAKf,EACLgB,OAAQ3B,KAAKuB,aAAaK,KAAK5B,MAC/B6B,YAAY,IACZC,aAAa,IACbC,YAAY,IACZjB,OAAQd,KAAKqB,MAAMC,eAQxBJ,Q,kBC/Df,0CAMA,MAAMc,UAAgBC,UAClBd,YAAY5B,GACR6B,MAAM7B,GAONS,KAAKkC,UAAYC,IAAY,KAAOC,EAAQ,KAGhDC,qBACI,OACI,kBAAC,EAAD,OAKGL,YAER,MAAMM,EAAS,c,oBC3BtB,QAAQ,IASR,WACE,aAEA,IAAIC,EAAS,GAAGC,eAEhB,SAASC,IAGP,IAFA,IAAIC,EAAU,GAELC,EAAI,EAAGA,EAAIC,UAAUC,OAAQF,IAAK,CACzC,IAAIG,EAAMF,UAAUD,GACpB,GAAKG,EAAL,CACA,IAAIC,SAAiBD,EAErB,GAAgB,WAAZC,GAAoC,WAAZA,EAC1BL,EAAQM,KAAKF,QACR,GAAIG,MAAMC,QAAQJ,IAAQA,EAAID,OAAQ,CAC3C,IAAIM,EAAQV,EAAWW,MAAM,KAAMN,GAE/BK,GACFT,EAAQM,KAAKG,QAEV,GAAgB,WAAZJ,EACT,IAAK,IAAIM,KAAOP,EACVP,EAAOe,KAAKR,EAAKO,IAAQP,EAAIO,IAC/BX,EAAQM,KAAKK,IAMrB,OAAOX,EAAQa,KAAK,KAGeC,EAAOC,SAC1ChB,EAAoB,QAAIA,EACxBe,EAAOC,QAAUhB,QAKhB,KAFwB,EAAF,WACrB,OAAOA,GACR,QAFoB,OAEpB,aAxCL,I,iCCTA,kCAIO,MAAMN,EAAY,MACrB,IACI,OAAOuB,EACT,MAAMC,GACJ,OAAO,IAJU,I,kBCJzBH,EAAOC,QAAU","file":"component---src-pages-contact-jsx-a79ad44e556176281fc6.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\nimport styled from 'styled-components';\n\nimport 'font-awesome/css/font-awesome.min.css';\n\nconst SpanSty = styled.span`\n    ${props => props.inText ? 'padding-right: 5px;' : ''}\n`;\n\n/**\n * Icon component\n * @param props\n * @link https://fontawesome.com/get-started\n */\nclass Icon extends React.PureComponent {\n    renderIcon() {\n        const { name, title, className } = this.props;\n\n        const iconClass = classnames('fa', {\n            [`fa-${name}`]: true,\n        }, className);\n\n        return (\n            <span\n                className={iconClass}\n                title={title}\n            />\n        );\n    }\n\n    render() {\n        const { name, inText } = this.props;\n\n        if (name === '' || name == null) {\n            throw new Error('Icon prop `name` couldn\\'t be empty');\n        }\n\n        if(!inText) {\n            return this.renderIcon();\n        }\n\n        return (\n            <SpanSty inText={inText}>\n                {this.renderIcon()}\n            </SpanSty>\n        );\n    }\n}\n\nIcon.propTypes = {\n    name: PropTypes.string.isRequired,\n    title: PropTypes.string,\n    className: PropTypes.string,\n    inText: PropTypes.bool,\n};\n\nIcon.defaultProps = {\n    title: null,\n    className: null,\n    inText: false,\n};\n\nexport default Icon;","import React from 'react';\nimport styled from 'styled-components';\nimport Icon from '../../components/Icon/Icon';\n\nconst FORM_URL = 'https://docs.google.com/forms/d/e/1FAIpQLSfbcq5MKljpEZg27bOOj5OqdBP4ARBdikUs4G2zuqIgBYE4KA/viewform?embedded=true';\n\nconst ContactFormLoading = styled.div`\n    position: absolute;\n    ${props => props.loaded ? 'display: none;' : ''}\n`;\n\nconst ContactFormIframe = styled.iframe`\n    visibility: hidden;\n    width: 640px;\n    height: 822px;\n    ${props => props.loaded ? 'visibility: visible;' : ''}\n`;\n\nconst IconWrap = styled.span`\n    font-size: 150%;\n    opacity: 0.4;\n`;\n\nclass ContactForm extends React.PureComponent {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            formLoaded: false,\n        };\n    }\n\n    iframeLoaded() {\n        this.setState({\n            formLoaded: true,\n        });\n    }\n\n    render() {\n        return (\n            <React.Fragment>\n                <ContactFormLoading\n                    loaded={this.state.formLoaded}\n                >\n                    Form is loading...\n                    <IconWrap>\n                        <Icon name='cog fa-spin fa-fw' />\n                    </IconWrap>\n                </ContactFormLoading>\n                <ContactFormIframe\n                    src={FORM_URL}\n                    onLoad={this.iframeLoaded.bind(this)}\n                    frameBorder='0'\n                    marginHeight='0'\n                    marginWidth='0'\n                    loaded={this.state.formLoaded}\n                >\n                </ContactFormIframe>\n            </React.Fragment>\n        );\n    }\n}\n\nexport default ContactForm;\n","import React from 'react';\nimport { graphql } from 'gatsby';\nimport ContactForm from '../components/ContactForm/ContactForm';\nimport BasePage from './BasePage/BasePage';\nimport { isTestEnv } from '../services/testEnv';\n\nclass Contact extends BasePage {\n    constructor(props) {\n        super(props);\n\n        // Here I'm using inline loader for webpack.\n        // Since I don't have access to original webpack configuration,\n        // it's the only way to use specific loader\n        // @docs https://webpack.js.org/concepts/loaders/#inline\n        //\n        this.contentMd = isTestEnv ? null : require('raw-loader?modules!./md/contact.md');\n    }\n\n    renderAfterContent() {\n        return (\n            <ContactForm />\n        );\n    }\n}\n\nexport default Contact;\n\nexport const pageQuery = graphql`\n  query {\n    site {\n      siteMetadata {\n        title\n        description\n      }\n    }\n  }\n`;\n","require(\"core-js/modules/es6.array.is-array\");\n\n/*!\n  Copyright (c) 2017 Jed Watson.\n  Licensed under the MIT License (MIT), see\n  http://jedwatson.github.io/classnames\n*/\n\n/* global define */\n(function () {\n  'use strict';\n\n  var hasOwn = {}.hasOwnProperty;\n\n  function classNames() {\n    var classes = [];\n\n    for (var i = 0; i < arguments.length; i++) {\n      var arg = arguments[i];\n      if (!arg) continue;\n      var argType = typeof arg;\n\n      if (argType === 'string' || argType === 'number') {\n        classes.push(arg);\n      } else if (Array.isArray(arg) && arg.length) {\n        var inner = classNames.apply(null, arg);\n\n        if (inner) {\n          classes.push(inner);\n        }\n      } else if (argType === 'object') {\n        for (var key in arg) {\n          if (hasOwn.call(arg, key) && arg[key]) {\n            classes.push(key);\n          }\n        }\n      }\n    }\n\n    return classes.join(' ');\n  }\n\n  if (typeof module !== 'undefined' && module.exports) {\n    classNames[\"default\"] = classNames;\n    module.exports = classNames;\n  } else if (typeof define === 'function' && typeof define.amd === 'object' && define.amd) {\n    // register as 'classnames', consistent with npm package name\n    define('classnames', [], function () {\n      return classNames;\n    });\n  } else {\n    window.classNames = classNames;\n  }\n})();","// While running test there will be access to env variables.\n// If there is such access, then we can check whether it's test\n// and make some adjustments.\n//\nexport const isTestEnv = (() => {\n    try {\n        return process.env.NODE_ENV === 'test';\n    } catch(e) {\n        return false;\n    }\n})();","module.exports = \"# Contact me\\n\\nHi there!\\n\\nIf you want to drop me a line, you're more than welcome to do so.\\nAs you can see, I'm using a form instead of a simple email address.\\nThere are some reasons for that:\\n\\n* I don't want to get more spam than I'm already receiving.\\n* By using a dedicated form I will have saved copy of the email, in case I remove one from my inbox by accident.\\n* And finally I think it's simply faster for the user. You don't need to click on the email, wait until your client opens and then do exactly what you can do on this very page :)\\n\""],"sourceRoot":""}