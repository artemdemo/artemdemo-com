{"version":3,"sources":["webpack:///./src/pages/404.jsx","webpack:///./src/services/testEnv.js","webpack:///./src/pages/md/404.md"],"names":["NotFoundPage","BasePage","constructor","props","super","this","contentMd","isTestEnv","require","pageQuery","process","e","module","exports"],"mappings":"0FAAA,4EAKA,MAAMA,UAAqBC,UACvBC,YAAYC,GACRC,MAAMD,GAONE,KAAKC,UAAYC,IAAY,KAAOC,EAAQ,MAIrCR,YAER,MAAMS,EAAS,c,iCCpBtB,kCAIO,MAAMF,EAAY,MACrB,IACI,OAAOG,EACT,MAAMC,GACJ,OAAO,IAJU,I,kBCJzBC,EAAOC,QAAU","file":"component---src-pages-404-jsx-33e122603e68946c5029.js","sourcesContent":["import React from 'react'\nimport { graphql } from 'gatsby';\nimport BasePage from './BasePage/BasePage';\nimport { isTestEnv } from '../services/testEnv';\n\nclass NotFoundPage extends BasePage {\n    constructor(props) {\n        super(props);\n\n        // Here I'm using inline loader for webpack.\n        // Since I don't have access to original webpack configuration,\n        // it's the only way to use specific loader\n        // @docs https://webpack.js.org/concepts/loaders/#inline\n        //\n        this.contentMd = isTestEnv ? null : require('raw-loader?modules!./md/404.md');\n    }\n}\n\nexport default NotFoundPage;\n\nexport const pageQuery = graphql`\n  query {\n    site {\n      siteMetadata {\n        title\n        description\n      }\n    }\n  }\n`;\n","// While running test there will be access to env variables.\n// If there is such access, then we can check whether it's test\n// and make some adjustments.\n//\nexport const isTestEnv = (() => {\n    try {\n        return process.env.NODE_ENV === 'test';\n    } catch(e) {\n        return false;\n    }\n})();","module.exports = \"# NOT FOUND\\n\\nYou just hit a route that doesn't exist... the sadness.\""],"sourceRoot":""}