{"data":{"site":{"siteMetadata":{"title":"Artem Demo, frontend dev.","author":"Artem Demo"}},"markdownRemark":{"id":"998dfe01-d204-5094-a829-d23fa9c6e229","excerpt":"First, let’s see what is the problem, then we’ll discuss possible solutions and, in the end,\nwe’ll compare the solutions that already exist…","html":"<p>First, let’s see what is the problem, then we’ll discuss possible solutions and, in the end,\nwe’ll compare the solutions that already exist in the market.\nWhy in this order and why not go straight to the last point?\nWell, first you’re more than welcome to jump right to the end and second,\nI just don’t think that the solution is so easy to grasp.</p>\n<p>Anyway, as I said, let’s see how we build a React-Redux application. Usually,\nfor each ajax call, we need 3-4 different files.\nThose files that hold different types of data pieces that allow us to manage the application state:</p>\n<ul>\n<li>constants - unique data identifiers.</li>\n<li>actions - data transfer functions (in some cases they also make logic for async requests to the server).</li>\n<li>reducers - functions that define how stat should be changed.</li>\n<li>sagas - async calls (you use them if you want to keep async operations away from actions)</li>\n</ul>\n<p>Let’s see a simple example:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// constants.js</span>\n<span class=\"token keyword\">const</span> <span class=\"token constant\">ADD_TODO</span> <span class=\"token operator\">=</span> <span class=\"token string\">'ADD_TODO'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token constant\">TODO_ADDED</span> <span class=\"token operator\">=</span> <span class=\"token string\">'TODO_ADDED'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// actions.js</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">addTodo</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    type<span class=\"token punctuation\">:</span> <span class=\"token constant\">ADD_TODO</span><span class=\"token punctuation\">,</span>\n    data<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">todoAdded</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    type<span class=\"token punctuation\">:</span> <span class=\"token constant\">TODO_ADDED</span><span class=\"token punctuation\">,</span>\n    data<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// reducer.js</span>\n<span class=\"token keyword\">const</span> initState <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  data<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  adding<span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">todoReducer</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>state <span class=\"token operator\">=</span> initState<span class=\"token punctuation\">,</span> action<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> <span class=\"token constant\">ADD_TODO</span><span class=\"token punctuation\">:</span>\n      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token operator\">...</span>state<span class=\"token punctuation\">,</span>\n        adding<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">case</span> <span class=\"token constant\">TODO_ADDED</span><span class=\"token punctuation\">:</span>\n      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token operator\">...</span>state<span class=\"token punctuation\">,</span>\n        data<span class=\"token punctuation\">:</span> action<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">,</span>\n        adding<span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">default</span><span class=\"token punctuation\">:</span>\n      <span class=\"token keyword\">return</span> state<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// saga.js</span>\n<span class=\"token keyword\">function</span><span class=\"token operator\">*</span> <span class=\"token function\">addTodoSaga</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> data <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">yield</span> <span class=\"token function\">take</span><span class=\"token punctuation\">(</span><span class=\"token constant\">ADD_TODO</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">yield</span> request\n                <span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/api/todo'</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">yield</span> <span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token function\">todoAdded</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">err</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>As you see - creating those 4 files is a lot of boilerplate and I am constantly thinking about how it could be reduced.\nFirst of all, constants look a little redundant. They are only unique text identifiers,\nwhy do we need to create a separate file for them? It looks like they can be part of the action itself.</p>\n<p>We can define constants while defining an action and then use it in the reducer and in the sagas.\nSo the goal is to define the action in this way:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> someAction <span class=\"token operator\">=</span> <span class=\"token function\">createAction</span><span class=\"token punctuation\">(</span><span class=\"token string\">'SOME_ACTION'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Then we need a way to use this action in the reducer.\nSo it will be convenient if the created action could return a constant simply by converting it to the primitive,\nfor example:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>someAction<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// will print \"SOME_ACTION\"</span></code></pre></div>\n<p>It can be done by overriding toString method. The full implementation of <code class=\"language-text\">createAction</code> could look like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// actionCreator.js</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">createAction</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>constant<span class=\"token punctuation\">,</span> actionFunc<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">resultFunc</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>args<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>actionFunc<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n                type<span class=\"token punctuation\">:</span> constant<span class=\"token punctuation\">,</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">const</span> action <span class=\"token operator\">=</span> <span class=\"token function\">actionFunc</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n            type<span class=\"token punctuation\">:</span> constant<span class=\"token punctuation\">,</span>\n            <span class=\"token operator\">...</span>action<span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    resultFunc<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">toString</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> constant<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> resultFunc<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Now we need to write <code class=\"language-text\">reducerCreator</code>. I want to get rid of the same code structure that appears in each reducer:\n<code class=\"language-text\">switch</code>, <code class=\"language-text\">case</code>, <code class=\"language-text\">default</code>.\nIt’s very repetitive and it looks like we can just define the reducer with some object that will define each case and\nalso automatically add the default state. So it will look like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> todoReducer <span class=\"token operator\">=</span> <span class=\"token function\">createReducer</span><span class=\"token punctuation\">(</span>initState<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token punctuation\">[</span>addTodo<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> state <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    <span class=\"token operator\">...</span>state<span class=\"token punctuation\">,</span>\n    adding<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">[</span>todoAdded<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">,</span> action<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    <span class=\"token operator\">...</span>state<span class=\"token punctuation\">,</span>\n    data<span class=\"token punctuation\">:</span> action<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">,</span>\n    adding<span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>The full implementation:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// reducerCreator.js</span>\n<span class=\"token keyword\">import</span> _get <span class=\"token keyword\">from</span> <span class=\"token string\">'lodash/get'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> _isObject <span class=\"token keyword\">from</span> <span class=\"token string\">'lodash/isObject'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> _isArray <span class=\"token keyword\">from</span> <span class=\"token string\">'lodash/isArray'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> _isFunction <span class=\"token keyword\">from</span> <span class=\"token string\">'lodash/isFunction'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">createReducer</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>initState<span class=\"token punctuation\">,</span> actionsHandler<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>state <span class=\"token operator\">=</span> initState<span class=\"token punctuation\">,</span> action<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> type <span class=\"token operator\">=</span> <span class=\"token function\">_get</span><span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">,</span> <span class=\"token string\">'type'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>type <span class=\"token operator\">&amp;&amp;</span> actionsHandler<span class=\"token punctuation\">.</span><span class=\"token function\">hasOwnProperty</span><span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">const</span> handler <span class=\"token operator\">=</span> actionsHandler<span class=\"token punctuation\">[</span>action<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">_isFunction</span><span class=\"token punctuation\">(</span>handler<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">return</span> <span class=\"token function\">handler</span><span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">,</span> action<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'action handler should be a function'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> state<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>This is the basic idea. We’re simplifying actions and reducers and removing constants.\nNow we can write the whole implementation,\nbut it’s rarely a good idea because we could introduce errors that others have already fixed.</p>\n<p>Therefore let’s see what solutions we already have.\nIn the official Redux documentation is a chapter that talks exactly about that -\n<a href=\"https://redux.js.org/recipes/reducingboilerplate\">how to reduce boilerplate</a> in Redux.\nThere are links to some libraries that solve it for us: redux-actions and redux-act</p>\n<p><strong>redux-actions</strong></p>\n<p><a href=\"https://github.com/redux-utilities/redux-actions\">https://github.com/redux-utilities/redux-actions</a></p>\n<p>Library creates actions with a different structure than in <a href=\"https://redux.js.org/basics/actions\">classic Redux</a>:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token punctuation\">{</span>\n  type<span class=\"token punctuation\">:</span> <span class=\"token string\">'UPDATE_ADMIN_USER'</span><span class=\"token punctuation\">,</span>\n  payload<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> name<span class=\"token punctuation\">:</span> <span class=\"token string\">'Foo'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  meta<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> admin<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>This way payload is the only place to store data for the reducer.\nThis will make our life easier when creating an action.\nIn the case where the action is only passing data that doesn’t have to be separated or reorganized,\nwe could define it in a very simple way:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> increment <span class=\"token operator\">=</span> <span class=\"token function\">createAction</span><span class=\"token punctuation\">(</span><span class=\"token string\">'INCREMENT'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">increment</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// { type: 'INCREMENT' }</span>\n<span class=\"token function\">increment</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// { type: 'INCREMENT', payload: 10 }</span></code></pre></div>\n<p>API for creating reducers is <code class=\"language-text\">handleActions()</code> - while creating the developer should provide the constant himself.\nFor example, we will use the same action that increments state (see above).</p>\n<p>Then the user will need to create a reducer, that will handle it:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> reducer <span class=\"token operator\">=</span> <span class=\"token function\">handleActions</span><span class=\"token punctuation\">(</span>\n  <span class=\"token comment\">// Action handlers:</span>\n  <span class=\"token comment\">//</span>\n  <span class=\"token punctuation\">{</span>\n    <span class=\"token constant\">INCREMENT</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">,</span> action<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      counter<span class=\"token punctuation\">:</span> state<span class=\"token punctuation\">.</span>counter <span class=\"token operator\">+</span> action<span class=\"token punctuation\">.</span>payload\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// Default state:</span>\n  <span class=\"token comment\">//</span>\n  <span class=\"token punctuation\">{</span> counter<span class=\"token punctuation\">:</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>As you can see, the user expected to explicitly write the same constant that he used, when he created the action.\nThe author could have done it better and stored the constant in the action function.</p>\n<p>In addition, I don’t like the fact that the default state comes last.\nShouldn’t we first define the default state and then the action handlers.\nI think this way the code will be more readable.</p>\n<p><strong>redux-act</strong></p>\n<p><a href=\"https://github.com/pauldijou/redux-act\">https://github.com/pauldijou/redux-act</a></p>\n<p>This one stores the constants in the action itself and you don’t need to explicitly write it when defining the reducer.\nAlso, the action creator function accepts any string as a constant, which is nice:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> createAction<span class=\"token punctuation\">,</span> createReducer <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'redux-act'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> increment <span class=\"token operator\">=</span> <span class=\"token function\">createAction</span><span class=\"token punctuation\">(</span><span class=\"token string\">'increment the state'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> decrement <span class=\"token operator\">=</span> <span class=\"token function\">createAction</span><span class=\"token punctuation\">(</span><span class=\"token string\">'decrement the state'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> counterReducer <span class=\"token operator\">=</span> <span class=\"token function\">createReducer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token punctuation\">[</span>increment<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> state <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">[</span>decrement<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> state <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// &lt;-- This is the default state</span></code></pre></div>\n<p>Similar to the previous library this one uses payload property to store data.\nIn the same way, it simplifies the way that we create actions and pass data through them.</p>\n<p>The default state again is placed last, while creating the reducer. It looks like all libraries prefer it this way.</p>\n<p><strong>Resume</strong></p>\n<p>Out of these 2 libraries, I prefer the first one, <a href=\"https://github.com/redux-utilities/redux-actions\">redux-actions</a>.</p>\n<p>Both libraries are very similar, but <code class=\"language-text\">redux-actions</code> has one feature in its API design, that makes it stand out.\nWhen creating reducer, the callback function receives 2 parameters: <code class=\"language-text\">(state, action)</code>,\n<code class=\"language-text\">action</code> is the whole action object.\nIn case of <code class=\"language-text\">redux-act</code> reducer will receive only <code class=\"language-text\">payload</code> and not the whole object.</p>","frontmatter":{"title":"Reducing boilerplate in React + Redux app","date":"November 22, 2018","tags":["react","redux","boilerplate","constants"]}}},"pageContext":{"slug":"/20181122-reducing-boilerplate-in-react-redux-app/","previous":{"fields":{"slug":"/20181121-what-is-rest/"},"frontmatter":{"title":"What is REST?","tags":["rest"]}},"next":{"fields":{"slug":"/20181123-why-we-need-to-stop-validate-emails-on-frontend/"},"frontmatter":{"title":"Why we need to stop validating emails at the frontend","tags":["email","validation","regex"]}}}}