{"version":3,"sources":["webpack:///./src/pages/md/contact.md","webpack:///./src/services/testEnv.js","webpack:///./src/components/Icon/Icon.jsx","webpack:///./src/components/ContactForm/ContactForm.jsx","webpack:///./src/pages/contact.jsx"],"names":["isTestEnv","process","e","Icon","React","PureComponent","renderIcon","name","title","className","this","props","iconClass","classnames","render","inText","Error","propTypes","PropTypes","string","isRequired","bool","defaultProps","ContactForm","constructor","super","state","formLoaded","iframeLoaded","setState","src","onLoad","bind","frameBorder","marginHeight","marginWidth","Contact","BasePage","contentMd","require","default","renderAfterContent"],"mappings":"kKAAA,OAAe,0jB,kCCAf,kCAIO,MAAMA,EAAY,MACvB,IACE,OAAOC,EACP,MAAOC,GACP,OAAO,IAJc,I,gICOzB,MAAMC,UAAaC,IAAMC,cACvBC,aACE,MAAM,KAACC,EAAD,MAAOC,EAAP,UAAcC,GAAaC,KAAKC,MAEhCC,EAAYC,IAAW,KAAM,CACjC,CAAE,MAAKN,IAAS,GACfE,GAEH,OACE,0BACEA,UAAWG,EACXJ,MAAOA,IAKbM,SACE,MAAM,KAACP,EAAD,OAAOQ,GAAUL,KAAKC,MAE5B,GAAa,KAATJ,GAAuB,MAARA,EACjB,MAAM,IAAIS,MAAM,sCAGlB,OAAKD,EAKH,0BACEN,UAAWI,IAAW,CACpB,eAAgBE,KAGTL,KAAKJ,cATTI,KAAKJ,cAelBH,EAAKc,UAAY,CACfV,KAAMW,IAAUC,OAAOC,WACvBZ,MAAOU,IAAUC,OACjBV,UAAWS,IAAUC,OACrBJ,OAAQG,IAAUG,MAGpBlB,EAAKmB,aAAe,CAClBd,MAAO,KACPC,UAAW,KACXM,QAAQ,GAGKZ,Q,UCxDf,MAAMoB,UAAoBnB,IAAMC,cAC9BmB,YAAYb,GACVc,MAAMd,GAEND,KAAKgB,MAAQ,CACXC,YAAY,GAIhBC,eACElB,KAAKmB,SAAS,CACZF,YAAY,IAIhBb,SACE,OACE,oCACE,yBACEL,UAAWI,IAAW,CACpB,wBAAwB,EACxB,+BAAgCH,KAAKgB,MAAMC,cAH/C,qBAOE,0BAAMlB,UAAU,qBACd,kBAAC,EAAD,CAAMF,KAAK,wBAGf,4BACEE,UAAWI,IAAW,CACpB,uBAAuB,EACvB,8BAA+BH,KAAKgB,MAAMC,aAE5CG,IApCO,oHAqCPC,OAAQrB,KAAKkB,aAAaI,KAAKtB,MAC/BuB,YAAY,IACZC,aAAa,IACbC,YAAY,QAQPZ,Q,wBC/Cf,MAAMa,UAAgBC,UACpBb,YAAYb,GACVc,MAAMd,GAOND,KAAK4B,UAAYtC,IAAY,KAAOuC,EAAQ,QAA8BC,QAG5EC,qBACE,OACE,kBAAC,EAAD,OAKSL","file":"component---src-pages-contact-jsx-01c40e99b56b19b6ad3d.js","sourcesContent":["export default \"# Contact me\\n\\nHi there!\\n\\nIf you want to drop me a line, you're more than welcome to do so.\\nAs you can see, I'm using a form instead of a simple email address.\\nThere are some reasons for that:\\n\\n* I don't want to get more spam than I'm already receiving.\\n* By using a dedicated form I will have saved copy of the email, in case I remove one from my inbox by accident.\\n* And finally I think it's simply faster for the user. You don't need to click on the email, wait until your client opens and then do exactly what you can do on this very page :)\\n\";","// While running test there will be access to env variables.\n// If there is such access, then we can check whether it's test\n// and make some adjustments.\n//\nexport const isTestEnv = (() => {\n  try {\n    return process.env.NODE_ENV === 'test';\n  } catch (e) {\n    return false;\n  }\n})();\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\nimport 'font-awesome/css/font-awesome.min.css';\nimport './Icon.css';\n\n/**\n * Icon component\n * @param props\n * @link https://fontawesome.com/get-started\n */\nclass Icon extends React.PureComponent {\n  renderIcon() {\n    const {name, title, className} = this.props;\n\n    const iconClass = classnames('fa', {\n      [`fa-${name}`]: true,\n    }, className);\n\n    return (\n      <span\n        className={iconClass}\n        title={title}\n      />\n    );\n  }\n\n  render() {\n    const {name, inText} = this.props;\n\n    if (name === '' || name == null) {\n      throw new Error('Icon prop `name` couldn\\'t be empty');\n    }\n\n    if (!inText) {\n      return this.renderIcon();\n    }\n\n    return (\n      <span\n        className={classnames({\n          'icon_in-text': inText\n        })}\n      >\n                {this.renderIcon()}\n            </span>\n    );\n  }\n}\n\nIcon.propTypes = {\n  name: PropTypes.string.isRequired,\n  title: PropTypes.string,\n  className: PropTypes.string,\n  inText: PropTypes.bool,\n};\n\nIcon.defaultProps = {\n  title: null,\n  className: null,\n  inText: false,\n};\n\nexport default Icon;\n","import React from 'react';\nimport classnames from 'classnames';\nimport Icon from '../../components/Icon/Icon';\nimport './ContactForm.css';\n\nconst FORM_URL = 'https://docs.google.com/forms/d/e/1FAIpQLSfbcq5MKljpEZg27bOOj5OqdBP4ARBdikUs4G2zuqIgBYE4KA/viewform?embedded=true';\n\nclass ContactForm extends React.PureComponent {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      formLoaded: false,\n    };\n  }\n\n  iframeLoaded() {\n    this.setState({\n      formLoaded: true,\n    });\n  }\n\n  render() {\n    return (\n      <>\n        <div\n          className={classnames({\n            'contact-form-loading': true,\n            'contact-form-loading__loaded': this.state.formLoaded,\n          })}\n        >\n          Form is loading...\n          <span className='contact-form-icon'>\n            <Icon name='cog fa-spin fa-fw'/>\n          </span>\n        </div>\n        <iframe\n          className={classnames({\n            'contact-form-iframe': true,\n            'contact-form-iframe__loaded': this.state.formLoaded,\n          })}\n          src={FORM_URL}\n          onLoad={this.iframeLoaded.bind(this)}\n          frameBorder='0'\n          marginHeight='0'\n          marginWidth='0'\n        >\n        </iframe>\n      </>\n    );\n  }\n}\n\nexport default ContactForm;\n","import React from 'react';\nimport {graphql} from 'gatsby';\nimport ContactForm from '../components/ContactForm/ContactForm';\nimport BasePage from './BasePage/BasePage';\nimport {isTestEnv} from '../services/testEnv';\n\nclass Contact extends BasePage {\n  constructor(props) {\n    super(props);\n\n    // Here I'm using inline loader for webpack.\n    // Since I don't have access to original webpack configuration,\n    // it's the only way to use specific loader\n    // @docs https://webpack.js.org/concepts/loaders/#inline\n    //\n    this.contentMd = isTestEnv ? null : require('raw-loader!./md/contact.md').default;\n  }\n\n  renderAfterContent() {\n    return (\n      <ContactForm/>\n    );\n  }\n}\n\nexport default Contact;\n\nexport const pageQuery = graphql`\n  query {\n    site {\n      siteMetadata {\n        title\n        description\n      }\n    }\n  }\n`;\n"],"sourceRoot":""}